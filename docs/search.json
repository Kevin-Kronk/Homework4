[
  {
    "objectID": "pages/combining.html",
    "href": "pages/combining.html",
    "title": "Combining Excel and Delimited Data",
    "section": "",
    "text": "# Import packages\nlibrary(readxl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\nDownload the excel file and place it in the working directory. Import the data from the first sheet using the readxl package and print out the tibble.\n\n\n# Select the first sheet in the excel file\nwhite_wine_data &lt;- read_excel(\"../white-wine.xlsx\",\n                              sheet = excel_sheets(\"../white-wine.xlsx\")[1])\n\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nChange the non-standard variable names to the ones found in sheet 2 of the excel file. Do so by overwriting the current column names with the column of new names.\n\n\n# Load in the second sheet of the excel file\nwine_variable_names &lt;- read_excel(\"../white-wine.xlsx\",\n                                  sheet = excel_sheets(\"../white-wine.xlsx\")[2])\n\nwine_variable_names\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\n\n\n# Replace the non-standard column names with the new ones\ncolnames(white_wine_data) &lt;- wine_variable_names$Variables\n\ncolnames(white_wine_data)\n\n [1] \"fixed_acidity\"        \"volatile_acidity\"     \"citric_acid\"         \n [4] \"residual_sugar\"       \"chlorides\"            \"free_sulfur_dioxide\" \n [7] \"total_sulfur_dioxide\" \"density\"              \"pH\"                  \n[10] \"sulphates\"            \"alcohol\"              \"quality\"             \n\n\n\nLastly, add a column to this data set to indicate the wines are white.\n\n\n# Add column of wine type by repeating \"white\" for all rows in the tibble\nwhite_wine_data$wine_type &lt;- rep(\"white\", nrow(white_wine_data))\n\nwhite_wine_data\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nRead in the semi-colon delimited version of the red wine data set using the readr package. Be careful that the columns are read in as the correct type! Replace the variable names as done above. Append a column denoting the type as “red”.\n\n\n# Read in ; delimited data, specifying the 12 column data types\nred_wine_data &lt;- read_csv2(\"../red-wine.csv\",\n                           col_types = \"nnnnnnnnnnnn\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n# Use the variable names from the white wine excel sheet to update the col names\ncolnames(red_wine_data) &lt;- wine_variable_names$Variables\n\n# Add column of wine type by repeating \"red\" for all rows in the tibble\nred_wine_data$wine_type &lt;- rep(\"red\", nrow(red_wine_data))\n\nred_wine_data\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            74                7           0             19        76\n 2            78               88           0             26        98\n 3            78               76           4             23        92\n 4           112               28          56             19        75\n 5            74                7           0             19        76\n 6            74               66           0             18        75\n 7            79                6           6             16        69\n 8            73               65           0             12        65\n 9            78               58           2              2        73\n10            75                5          36             61        71\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nCombine these two data sets into one data set. They both have the exact same columns so this is an easy append task! Use the dplyr::bind_rows() function to create one tibble containing all of the wine data.\n\n\n# Bind the tibbles by row\nwine_data &lt;- dplyr::bind_rows(white_wine_data, red_wine_data)\n\nwine_data\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nStart a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\nContinue your chain to now sort the data from highest quality to lowest.\nContinue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\nContinue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.\n\n\nwine_data |&gt;\n  # Filter the rows\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  # Sort from highest to lowest quality\n  arrange(desc(quality)) |&gt;\n  # Keep only the acid based variables, alcohol, type, quality\n  select(fixed_acidity:citric_acid, alcohol, wine_type, quality) |&gt;\n  group_by(quality) |&gt;\n  # Find the alcohol mean and sd for each quality value\n  mutate(across(alcohol, list(mean = mean, sd = sd), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,198 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol wine_type quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1            91             0.27        0.45     104 white           9\n 2            66             0.36        0.29     124 white           9\n 3            74             0.24        0.36     125 white           9\n 4            69             0.36        0.34     127 white           9\n 5            71             0.26        0.49     129 white           9\n 6            62             0.66        0.48     128 white           8\n 7            62             0.66        0.48     128 white           8\n 8            68             0.26        0.42     105 white           8\n 9            67             0.23        0.31     107 white           8\n10            67             0.23        0.31     107 white           8\n# ℹ 1,188 more rows\n# ℹ 2 more variables: alcohol_mean &lt;dbl&gt;, alcohol_sd &lt;dbl&gt;",
    "crumbs": [
      "Home",
      "Combining Excel and Delimited Data"
    ]
  },
  {
    "objectID": "pages/concepts.html",
    "href": "pages/concepts.html",
    "title": "Conceptual Questions",
    "section": "",
    "text": "If your working directory is myfolder/homework/ , what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nWe would use ../MyData.csv\n\nWhat are the major benefits of using R projects?\n\nR projects allow for a separate environment and directory for all of the code and files that pertain to one particular analysis. This keeps your files organized and separated. Additionally, the project can be connected through git to a GitHub repo, so that the files can not only be saved on your local machine, but also in remote storage. The folder that houses the project also gets set as the working directory, so if the project is shared with someone else the relative file paths will still work.\n\nWhat is git and what is github?\n\nGit is a version control software that allows you to take “snapshots” of your work, so that it is saved on your local machine and the history of those changes can be seen and accessed. If something happens you can also revert back to a previous commit. It makes it easier to work on a project with others where you can both work on separate branches and then pull and merge each others changes. GitHub is a hosting service that allows us to store code and files remotely. Git can be used to push changes from your local machine to the remote repo, or to pull from the remote repo. This is important because now multiple people using different machines can work on the same project and have a safe place to store the project as they collaborate and make changes.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nA tibble gives a fancy version of the printed output that looks better, gives some metadata like column data types and number of rows, and doesn’t clog up the work space. Additionally, almost all tidyverse functions are built to work on a tibble, with them having similar syntax too. Tibbles don’t coerce down to a vector when you subset one column using [.\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\nas_tibble(iris) |&gt;\nselect(starts_with(“Petal”), Species) |&gt;\nfilter(Petal.Length &lt; 1.55) |&gt;\narrange(Species)",
    "crumbs": [
      "Home",
      "Conceptual Questions"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Homework 4",
    "section": "",
    "text": "An example pages site with multiple pages and a table of contents.\nThis could be a landing page for the site. Feel free to put whatever here!",
    "crumbs": [
      "Home",
      "Homework 4"
    ]
  },
  {
    "objectID": "pages/read_delimited.html",
    "href": "pages/read_delimited.html",
    "title": "Reading Delimited Data",
    "section": "",
    "text": "# Load in the tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\nRead this data into R directly from the URL using functions from the tidyverse. Add column names. Print out the tibble.\n\n\ndata_connection &lt;- \"https://www4.stat.ncsu.edu/online/datasets/glass.data\"\ncolumns &lt;- c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \n             \"K\", \"Ca\", \"Ba\", \"Fe\", \"Glass_Type\")\n# Read in a comma delimited file\nglass_data &lt;- read_csv(data_connection,\n                       col_names = columns)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Glass_Type\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Glass_Type\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0             1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0             1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0             1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0             1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0             1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26          1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0             1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0             1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0             1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11          1\n# ℹ 204 more rows\n\n\n\nStart a chain that overwrites the Glass_Type variable using mutate(). Create a character string version using ifelse().\nContinue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”.\n\n\n# Make a function to perform the conversion, for ease of viewing the code\n# If the Glass_Type isn't 1-7, then unknown, just in case they add a new type\nglass_type_convert &lt;- function(col) {\n  ifelse(col == 1, \"building_windows_float_processed\",\n         ifelse(col == 2, \"building_windows_non_float_processed\",\n                ifelse(col == 3, \"vehicle_windows_float_processed\",\n                      ifelse(col == 4, \"vehicle_windows_non_float_processed\",\n                             ifelse(col == 5, \"containers\",\n                                    ifelse(col == 6, \"tableware\",\n                                           ifelse(col == 7, \"headlamps\",\n                                                  \"unknown\")))))))\n}\n\n# Convert Glass_Type variable from numbers to strings to factors, then filter\nglass_data_filtered &lt;- glass_data |&gt;\n  mutate(Glass_Type = as.factor(glass_type_convert(Glass_Type))) |&gt;\n  filter(Fe &lt; 0.2, Glass_Type %in% c(\"tableware\", \"headlamps\"))\n\nglass_data_filtered\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Glass_Type\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;     \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps \n# ℹ 28 more rows\n\n\n\n\n\n\nRead this data into R directly from the URL using functions from the tidyverse. Add column names. Print out the tibble.\n\n\ndata_connection &lt;- \"https://www4.stat.ncsu.edu/online/datasets/yeast.data\"\n# Read in fixed width field data\nyeast_data &lt;- read_fwf(data_connection,\n                       col_positions = fwf_widths(c(12, 6, 6, 6, 6, \n                                                    6, 6, 6, 6, 3),\n                                                  c(\"seq_name\", \"mcg\", \"gvh\",\n                                                    \"alm\", \"mit\", \"erl\", \"pox\",\n                                                    \"vac\", \"nuc\", \"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nStart a chain that removes the seq_name and nuc columns.\nContinue your chain to add columns corresponding to the mean and median of each numeric variable at each class grouping.\n\n\nyeast_data_expanded &lt;- yeast_data |&gt;\n  # Remove seq_name and nuc\n  select(-c(\"seq_name\", \"nuc\")) |&gt;\n  group_by(class) |&gt;\n  # Create column for mean and median of each numeric variable grouped by class\n  mutate(across(where(is.numeric), list(mean = mean, median = median), \n                .names= \"{.col}_{.fn}\"))\n\nyeast_data_expanded\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  },
  {
    "objectID": "pages/concepts.html#task-1-conceptual-questions",
    "href": "pages/concepts.html#task-1-conceptual-questions",
    "title": "Conceptual Questions",
    "section": "",
    "text": "If your working directory is myfolder/homework/ , what relative path would you specify to get the file located at myfolder/MyData.csv?\n\nWe would use ../MyData.csv\n\nWhat are the major benefits of using R projects?\n\nR projects allow for a separate environment and directory for all of the code and files that pertain to one particular analysis. This keeps your files organized and separated. Additionally, the project can be connected through git to a GitHub repo, so that the files can not only be saved on your local machine, but also in remote storage. The folder that houses the project also gets set as the working directory, so if the project is shared with someone else the relative file paths will still work.\n\nWhat is git and what is github?\n\nGit is a version control software that allows you to take “snapshots” of your work, so that it is saved on your local machine and the history of those changes can be seen and accessed. If something happens you can also revert back to a previous commit. It makes it easier to work on a project with others where you can both work on separate branches and then pull and merge each others changes. GitHub is a hosting service that allows us to store code and files remotely. Git can be used to push changes from your local machine to the remote repo, or to pull from the remote repo. This is important because now multiple people using different machines can work on the same project and have a safe place to store the project as they collaborate and make changes.\n\nWhat are the two main differences between a tibble and a data.frame?\n\nA tibble gives a fancy version of the printed output that looks better, gives some metadata like column data types and number of rows, and doesn’t clog up the work space. Additionally, almost all tidyverse functions are built to work on a tibble, with them having similar syntax too. Tibbles don’t coerce down to a vector when you subset one column using [.\n\nRewrite the following nested function call using BaseR’s chaining operator:\n\nas_tibble(iris) |&gt;\nselect(starts_with(“Petal”), Species) |&gt;\nfilter(Petal.Length &lt; 1.55) |&gt;\narrange(Species)",
    "crumbs": [
      "Home",
      "Conceptual Questions"
    ]
  },
  {
    "objectID": "pages/read_delimited.html#task-2-reading-delimited-data",
    "href": "pages/read_delimited.html#task-2-reading-delimited-data",
    "title": "Reading Delimited Data",
    "section": "",
    "text": "# Load in the tidyverse\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\nRead this data into R directly from the URL using functions from the tidyverse. Add column names. Print out the tibble.\n\n\ndata_connection &lt;- \"https://www4.stat.ncsu.edu/online/datasets/glass.data\"\ncolumns &lt;- c(\"Id\", \"RI\", \"Na\", \"Mg\", \"Al\", \"Si\", \n             \"K\", \"Ca\", \"Ba\", \"Fe\", \"Glass_Type\")\n# Read in a comma delimited file\nglass_data &lt;- read_csv(data_connection,\n                       col_names = columns)\n\nRows: 214 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\ndbl (11): Id, RI, Na, Mg, Al, Si, K, Ca, Ba, Fe, Glass_Type\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nglass_data\n\n# A tibble: 214 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Glass_Type\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt;      &lt;dbl&gt;\n 1     1  1.52  13.6  4.49  1.1   71.8  0.06  8.75     0  0             1\n 2     2  1.52  13.9  3.6   1.36  72.7  0.48  7.83     0  0             1\n 3     3  1.52  13.5  3.55  1.54  73.0  0.39  7.78     0  0             1\n 4     4  1.52  13.2  3.69  1.29  72.6  0.57  8.22     0  0             1\n 5     5  1.52  13.3  3.62  1.24  73.1  0.55  8.07     0  0             1\n 6     6  1.52  12.8  3.61  1.62  73.0  0.64  8.07     0  0.26          1\n 7     7  1.52  13.3  3.6   1.14  73.1  0.58  8.17     0  0             1\n 8     8  1.52  13.2  3.61  1.05  73.2  0.57  8.24     0  0             1\n 9     9  1.52  14.0  3.58  1.37  72.1  0.56  8.3      0  0             1\n10    10  1.52  13    3.6   1.36  73.0  0.57  8.4      0  0.11          1\n# ℹ 204 more rows\n\n\n\nStart a chain that overwrites the Glass_Type variable using mutate(). Create a character string version using ifelse().\nContinue your chain and keep only observations where the Fe variable is less than 0.2 and the Type of Glass is either “tableware” or “headlamps”.\n\n\n# Make a function to perform the conversion, for ease of viewing the code\n# If the Glass_Type isn't 1-7, then unknown, just in case they add a new type\nglass_type_convert &lt;- function(col) {\n  ifelse(col == 1, \"building_windows_float_processed\",\n         ifelse(col == 2, \"building_windows_non_float_processed\",\n                ifelse(col == 3, \"vehicle_windows_float_processed\",\n                      ifelse(col == 4, \"vehicle_windows_non_float_processed\",\n                             ifelse(col == 5, \"containers\",\n                                    ifelse(col == 6, \"tableware\",\n                                           ifelse(col == 7, \"headlamps\",\n                                                  \"unknown\")))))))\n}\n\n# Convert Glass_Type variable from numbers to strings to factors, then filter\nglass_data_filtered &lt;- glass_data |&gt;\n  mutate(Glass_Type = as.factor(glass_type_convert(Glass_Type))) |&gt;\n  filter(Fe &lt; 0.2, Glass_Type %in% c(\"tableware\", \"headlamps\"))\n\nglass_data_filtered\n\n# A tibble: 38 × 11\n      Id    RI    Na    Mg    Al    Si     K    Ca    Ba    Fe Glass_Type\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;fct&gt;     \n 1   177  1.52  14    2.39  1.56  72.4  0     9.57  0        0 tableware \n 2   178  1.52  13.8  2.41  1.19  72.8  0     9.77  0        0 tableware \n 3   179  1.52  14.5  2.24  1.62  72.4  0     9.26  0        0 tableware \n 4   180  1.52  14.1  2.19  1.66  72.7  0     9.32  0        0 tableware \n 5   181  1.51  14.4  1.74  1.54  74.6  0     7.59  0        0 tableware \n 6   182  1.52  15.0  0.78  1.74  72.5  0     9.95  0        0 tableware \n 7   183  1.52  14.2  0     2.09  72.7  0    10.9   0        0 tableware \n 8   184  1.52  14.6  0     0.56  73.5  0    11.2   0        0 tableware \n 9   185  1.51  17.4  0     0.34  75.4  0     6.65  0        0 tableware \n10   186  1.51  13.7  3.2   1.81  72.8  1.76  5.43  1.19     0 headlamps \n# ℹ 28 more rows\n\n\n\n\n\n\nRead this data into R directly from the URL using functions from the tidyverse. Add column names. Print out the tibble.\n\n\ndata_connection &lt;- \"https://www4.stat.ncsu.edu/online/datasets/yeast.data\"\n# Read in fixed width field data\nyeast_data &lt;- read_fwf(data_connection,\n                       col_positions = fwf_widths(c(12, 6, 6, 6, 6, \n                                                    6, 6, 6, 6, 3),\n                                                  c(\"seq_name\", \"mcg\", \"gvh\",\n                                                    \"alm\", \"mit\", \"erl\", \"pox\",\n                                                    \"vac\", \"nuc\", \"class\")))\n\nRows: 1484 Columns: 10\n── Column specification ────────────────────────────────────────────────────────\n\nchr (2): seq_name, class\ndbl (8): mcg, gvh, alm, mit, erl, pox, vac, nuc\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\nyeast_data\n\n# A tibble: 1,484 × 10\n   seq_name     mcg   gvh   alm   mit   erl   pox   vac   nuc class\n   &lt;chr&gt;      &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;\n 1 ADT1_YEAST  0.58  0.61  0.47  0.13   0.5   0    0.48  0.22 MIT  \n 2 ADT2_YEAST  0.43  0.67  0.48  0.27   0.5   0    0.53  0.22 MIT  \n 3 ADT3_YEAST  0.64  0.62  0.49  0.15   0.5   0    0.53  0.22 MIT  \n 4 AAR2_YEAST  0.58  0.44  0.57  0.13   0.5   0    0.54  0.22 NUC  \n 5 AATM_YEAST  0.42  0.44  0.48  0.54   0.5   0    0.48  0.22 MIT  \n 6 AATC_YEAST  0.51  0.4   0.56  0.17   0.5   0.5  0.49  0.22 CYT  \n 7 ABC1_YEAST  0.5   0.54  0.48  0.65   0.5   0    0.53  0.22 MIT  \n 8 BAF1_YEAST  0.48  0.45  0.59  0.2    0.5   0    0.58  0.34 NUC  \n 9 ABF2_YEAST  0.55  0.5   0.66  0.36   0.5   0    0.49  0.22 MIT  \n10 ABP1_YEAST  0.4   0.39  0.6   0.15   0.5   0    0.58  0.3  CYT  \n# ℹ 1,474 more rows\n\n\n\nStart a chain that removes the seq_name and nuc columns.\nContinue your chain to add columns corresponding to the mean and median of each numeric variable at each class grouping.\n\n\nyeast_data_expanded &lt;- yeast_data |&gt;\n  # Remove seq_name and nuc\n  select(-c(\"seq_name\", \"nuc\")) |&gt;\n  group_by(class) |&gt;\n  # Create column for mean and median of each numeric variable grouped by class\n  mutate(across(where(is.numeric), list(mean = mean, median = median), \n                .names= \"{.col}_{.fn}\"))\n\nyeast_data_expanded\n\n# A tibble: 1,484 × 22\n# Groups:   class [10]\n     mcg   gvh   alm   mit   erl   pox   vac class mcg_mean mcg_median gvh_mean\n   &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt;    &lt;dbl&gt;      &lt;dbl&gt;    &lt;dbl&gt;\n 1  0.58  0.61  0.47  0.13   0.5   0    0.48 MIT      0.521       0.51    0.533\n 2  0.43  0.67  0.48  0.27   0.5   0    0.53 MIT      0.521       0.51    0.533\n 3  0.64  0.62  0.49  0.15   0.5   0    0.53 MIT      0.521       0.51    0.533\n 4  0.58  0.44  0.57  0.13   0.5   0    0.54 NUC      0.452       0.45    0.456\n 5  0.42  0.44  0.48  0.54   0.5   0    0.48 MIT      0.521       0.51    0.533\n 6  0.51  0.4   0.56  0.17   0.5   0.5  0.49 CYT      0.481       0.48    0.470\n 7  0.5   0.54  0.48  0.65   0.5   0    0.53 MIT      0.521       0.51    0.533\n 8  0.48  0.45  0.59  0.2    0.5   0    0.58 NUC      0.452       0.45    0.456\n 9  0.55  0.5   0.66  0.36   0.5   0    0.49 MIT      0.521       0.51    0.533\n10  0.4   0.39  0.6   0.15   0.5   0    0.58 CYT      0.481       0.48    0.470\n# ℹ 1,474 more rows\n# ℹ 11 more variables: gvh_median &lt;dbl&gt;, alm_mean &lt;dbl&gt;, alm_median &lt;dbl&gt;,\n#   mit_mean &lt;dbl&gt;, mit_median &lt;dbl&gt;, erl_mean &lt;dbl&gt;, erl_median &lt;dbl&gt;,\n#   pox_mean &lt;dbl&gt;, pox_median &lt;dbl&gt;, vac_mean &lt;dbl&gt;, vac_median &lt;dbl&gt;",
    "crumbs": [
      "Home",
      "Reading Delimited Data"
    ]
  },
  {
    "objectID": "pages/combining.html#task-3-combining-excel-and-delimited-data",
    "href": "pages/combining.html#task-3-combining-excel-and-delimited-data",
    "title": "Combining Excel and Delimited Data",
    "section": "",
    "text": "# Import packages\nlibrary(readxl)\nlibrary(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.5.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.4     ✔ tidyr     1.3.1\n✔ purrr     1.0.4     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\n\n\n\nDownload the excel file and place it in the working directory. Import the data from the first sheet using the readxl package and print out the tibble.\n\n\n# Select the first sheet in the excel file\nwhite_wine_data &lt;- read_excel(\"../white-wine.xlsx\",\n                              sheet = excel_sheets(\"../white-wine.xlsx\")[1])\n\nwhite_wine_data\n\n# A tibble: 4,898 × 12\n   `fixed acidity` `volatile acidity` `citric acid` `residual sugar` chlorides\n             &lt;dbl&gt;              &lt;dbl&gt;         &lt;dbl&gt;            &lt;dbl&gt;     &lt;dbl&gt;\n 1               7               0.27          0.36             20.7     0.045\n 2              63               0.3           0.34              1.6     0.049\n 3              81               0.28          0.4               6.9     0.05 \n 4              72               0.23          0.32              8.5     0.058\n 5              72               0.23          0.32              8.5     0.058\n 6              81               0.28          0.4               6.9     0.05 \n 7              62               0.32          0.16              7       0.045\n 8               7               0.27          0.36             20.7     0.045\n 9              63               0.3           0.34              1.6     0.049\n10              81               0.22          0.43              1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 7 more variables: `free sulfur dioxide` &lt;dbl&gt;,\n#   `total sulfur dioxide` &lt;dbl&gt;, density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;,\n#   alcohol &lt;dbl&gt;, quality &lt;dbl&gt;\n\n\n\nChange the non-standard variable names to the ones found in sheet 2 of the excel file. Do so by overwriting the current column names with the column of new names.\n\n\n# Load in the second sheet of the excel file\nwine_variable_names &lt;- read_excel(\"../white-wine.xlsx\",\n                                  sheet = excel_sheets(\"../white-wine.xlsx\")[2])\n\nwine_variable_names\n\n# A tibble: 12 × 1\n   Variables           \n   &lt;chr&gt;               \n 1 fixed_acidity       \n 2 volatile_acidity    \n 3 citric_acid         \n 4 residual_sugar      \n 5 chlorides           \n 6 free_sulfur_dioxide \n 7 total_sulfur_dioxide\n 8 density             \n 9 pH                  \n10 sulphates           \n11 alcohol             \n12 quality             \n\n\n\n# Replace the non-standard column names with the new ones\ncolnames(white_wine_data) &lt;- wine_variable_names$Variables\n\ncolnames(white_wine_data)\n\n [1] \"fixed_acidity\"        \"volatile_acidity\"     \"citric_acid\"         \n [4] \"residual_sugar\"       \"chlorides\"            \"free_sulfur_dioxide\" \n [7] \"total_sulfur_dioxide\" \"density\"              \"pH\"                  \n[10] \"sulphates\"            \"alcohol\"              \"quality\"             \n\n\n\nLastly, add a column to this data set to indicate the wines are white.\n\n\n# Add column of wine type by repeating \"white\" for all rows in the tibble\nwhite_wine_data$wine_type &lt;- rep(\"white\", nrow(white_wine_data))\n\nwhite_wine_data\n\n# A tibble: 4,898 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 4,888 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nRead in the semi-colon delimited version of the red wine data set using the readr package. Be careful that the columns are read in as the correct type! Replace the variable names as done above. Append a column denoting the type as “red”.\n\n\n# Read in ; delimited data, specifying the 12 column data types\nred_wine_data &lt;- read_csv2(\"../red-wine.csv\",\n                           col_types = \"nnnnnnnnnnnn\")\n\nℹ Using \"','\" as decimal and \"'.'\" as grouping mark. Use `read_delim()` for more control.\n\n# Use the variable names from the white wine excel sheet to update the col names\ncolnames(red_wine_data) &lt;- wine_variable_names$Variables\n\n# Add column of wine type by repeating \"red\" for all rows in the tibble\nred_wine_data$wine_type &lt;- rep(\"red\", nrow(red_wine_data))\n\nred_wine_data\n\n# A tibble: 1,599 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1            74                7           0             19        76\n 2            78               88           0             26        98\n 3            78               76           4             23        92\n 4           112               28          56             19        75\n 5            74                7           0             19        76\n 6            74               66           0             18        75\n 7            79                6           6             16        69\n 8            73               65           0             12        65\n 9            78               58           2              2        73\n10            75                5          36             61        71\n# ℹ 1,589 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nCombine these two data sets into one data set. They both have the exact same columns so this is an easy append task! Use the dplyr::bind_rows() function to create one tibble containing all of the wine data.\n\n\n# Bind the tibbles by row\nwine_data &lt;- dplyr::bind_rows(white_wine_data, red_wine_data)\n\nwine_data\n\n# A tibble: 6,497 × 13\n   fixed_acidity volatile_acidity citric_acid residual_sugar chlorides\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;          &lt;dbl&gt;     &lt;dbl&gt;\n 1             7             0.27        0.36           20.7     0.045\n 2            63             0.3         0.34            1.6     0.049\n 3            81             0.28        0.4             6.9     0.05 \n 4            72             0.23        0.32            8.5     0.058\n 5            72             0.23        0.32            8.5     0.058\n 6            81             0.28        0.4             6.9     0.05 \n 7            62             0.32        0.16            7       0.045\n 8             7             0.27        0.36           20.7     0.045\n 9            63             0.3         0.34            1.6     0.049\n10            81             0.22        0.43            1.5     0.044\n# ℹ 6,487 more rows\n# ℹ 8 more variables: free_sulfur_dioxide &lt;dbl&gt;, total_sulfur_dioxide &lt;dbl&gt;,\n#   density &lt;dbl&gt;, pH &lt;dbl&gt;, sulphates &lt;dbl&gt;, alcohol &lt;dbl&gt;, quality &lt;dbl&gt;,\n#   wine_type &lt;chr&gt;\n\n\n\nStart a chain on your new combined data object to filter the data to only look at high-quality wines (quality &gt; 6.5) and wines that have a reasonable alcohol value (alcohol &lt; 132).\nContinue your chain to now sort the data from highest quality to lowest.\nContinue your chain to select only the variables that contain acid, the alcohol variable, the type variable, and the quality variable.\nContinue your chain to add the mean and standard deviation of the alcohol variable to the data set for each setting of the quality variable.\n\n\nwine_data |&gt;\n  # Filter the rows\n  filter(quality &gt; 6.5 & alcohol &lt; 132) |&gt;\n  # Sort from highest to lowest quality\n  arrange(desc(quality)) |&gt;\n  # Keep only the acid based variables, alcohol, type, quality\n  select(fixed_acidity:citric_acid, alcohol, wine_type, quality) |&gt;\n  group_by(quality) |&gt;\n  # Find the alcohol mean and sd for each quality value\n  mutate(across(alcohol, list(mean = mean, sd = sd), .names = \"{.col}_{.fn}\"))\n\n# A tibble: 1,198 × 8\n# Groups:   quality [3]\n   fixed_acidity volatile_acidity citric_acid alcohol wine_type quality\n           &lt;dbl&gt;            &lt;dbl&gt;       &lt;dbl&gt;   &lt;dbl&gt; &lt;chr&gt;       &lt;dbl&gt;\n 1            91             0.27        0.45     104 white           9\n 2            66             0.36        0.29     124 white           9\n 3            74             0.24        0.36     125 white           9\n 4            69             0.36        0.34     127 white           9\n 5            71             0.26        0.49     129 white           9\n 6            62             0.66        0.48     128 white           8\n 7            62             0.66        0.48     128 white           8\n 8            68             0.26        0.42     105 white           8\n 9            67             0.23        0.31     107 white           8\n10            67             0.23        0.31     107 white           8\n# ℹ 1,188 more rows\n# ℹ 2 more variables: alcohol_mean &lt;dbl&gt;, alcohol_sd &lt;dbl&gt;",
    "crumbs": [
      "Home",
      "Combining Excel and Delimited Data"
    ]
  }
]